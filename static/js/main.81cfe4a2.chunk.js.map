{"version":3,"sources":["components/Dropdown/Dropdown.js","components/Navbar/Navbar.js","components/PathFindingVisualizer/Node/Node.js","algorithms/djiktras.js","algorithms/bfs.js","components/PathFindingVisualizer/PathFindingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["Dropdown","_ref","name","onClick","_useState","bfs","dijkstra","useState","_useState2","Object","slicedToArray","open","setOpen","dropdownMenuRef","useRef","useEffect","handler","e","current","contains","target","document","addEventListener","removeEventListener","react_default","a","createElement","className","concat","ref","Navbar","clearBoard","clearWalls","selectedAlgo","setSelectedAlgo","Dropdown_Dropdown","Node","row","col","isStart","isFinish","isWall","onMouseEnter","onMouseDown","onMouseUp","extraClassName","id","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","_step2","nodes","_iterator2","_createForOfIteratorHelper","s","n","done","_step3","value","_iterator3","node","push","err","f","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","_step","_iterator","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","visitedNodes","bfs_createForOfIteratorHelper","getInvalidMove","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINITSH_NODE_COL","GRID_ROWS","GRID_COLS","PathFindingVisualizer","setGrid","_useState3","_useState4","mouseIsPressed","setMouseIsPressed","getInitialGrid","handleMouseDown","newGrid","getNewGridWithWallToggled","Fragment","Navbar_Navbar","animateAlgorithm","arguments","undefined","PathFindingVisualizer_createForOfIteratorHelper","querySelectorAll","console","log","classList","remove","currRow","map","rowIndex","key","nodeIndex","Node_Node","handleMouseEnter","createNode","_loop","i","setTimeout","_loop2","getElementById","add","animateShortestPath","v","_ret","slice","newNode","objectSpread","App","PathFindingVisualizer_PathFindingVisualizer","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.81cfe4a2.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react'\nimport './Dropdown.css'\nimport React  from 'react';\n\nexport default function Dropdown({name, onClick, bfs, dijkstra}) {\n    const [open, setOpen] = useState(false)\n    const dropdownMenuRef = useRef(null)\n\n    useEffect(() => {\n        let handler = (e) => {\n            if(!dropdownMenuRef.current.contains(e.target)) {\n                setOpen(false)\n            }\n        }\n        document.addEventListener('mousedown', handler)\n\n        return () => {\n            document.removeEventListener('mousedown', handler)\n        }\n    }, [])\n\n    return (\n        <div className=\"menu-container\">\n            <div className=\"menu-trigger\" onClick={() => setOpen(!open)}>{name} \n            { open ? <span className=\"material-symbols-outlined custom-icon\">arrow_drop_up</span> : <span className=\"material-symbols-outlined custom-icon\">arrow_drop_down</span>}       \n                \n            </div>\n            <div className={`dropdown-menu ${open ? 'open' : 'close'}`} ref={dropdownMenuRef}>\n                <ul>\n                    {/* <DropdownItem name={'Breadth First Search'} onClick={onClick}/>\n                    <DropdownItem name={'Depth First Search'} onClick={onClick}/>\n                    <DropdownItem name={'Djiktras Algorithm'} onClick={onClick}/>\n                    <DropdownItem name={'More to come...'} onClick={onClick}/> */}\n\n                    <li className=\"dropdownItem\" onClick={() => {onClick(\"BFS\");}}>Breadth First Search ( BFS )</li>\n                    <li className=\"dropdownItem\" onClick={() => {onClick(\"DFS\");}}>Depth First Search ( DFS )</li>\n                    <li className=\"dropdownItem\" onClick={() => {onClick(\"Dijktras\");}}>Djiktras Algorithm</li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nfunction DropdownItem({name, onClick}) {\n    return (\n        <li className=\"dropdownItem\" onClick={() => {onClick(name);}}>{name}</li>\n    )\n}","import { useState } from 'react'\nimport Dropdown from '../Dropdown/Dropdown'\nimport './Navbar.css'\nimport React from 'react';\nexport default function Navbar({bfs, dijkstra, clearBoard, clearWalls}) {\n\n    const [selectedAlgo, setSelectedAlgo] = useState('')\n\n    const handleClick = () => {\n        if(selectedAlgo === 'BFS') bfs();\n        else if(selectedAlgo === 'Dijktras')  dijkstra();\n    }\n\n    return (\n        <header>\n            <nav className=\"navbar\">\n                <span className=\"logoName\">Path Visualizer</span>\n                <div className=\"action\">\n                    <Dropdown name=\"Algorithms\" onClick={setSelectedAlgo} bfs={bfs} dijkstra={dijkstra}/>\n                    <button className=\"myButton\" onClick={handleClick}>Visualize {selectedAlgo}</button>\n                    <button className=\"myButton\" onClick={clearBoard}>Clear Board</button>\n                    <button className=\"myButton\" onClick={clearWalls}>Clear Walls</button>\n                    \n                </div>\n            </nav>\n        </header>\n    )\n\n}","import './Node.css'\nimport React from 'react';\nexport default function Node({\n    row,\n    col,\n    isStart,\n    isFinish,\n    isWall,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp\n    }) {\n\n    const extraClassName = isFinish\n        ? 'node-finish'\n        : isStart\n            ? 'node-start'\n            : isWall\n                ? 'node-wall'\n                : '';\n\n    return (\n        <div\n            id={`node-${row}-${col}`}\n            className={`node ${extraClassName}`}\n            onMouseDown={() => onMouseDown(row, col)}\n            onMouseEnter={() => onMouseEnter(row, col)}\n            onMouseUp={() => onMouseUp()}></div>\n    )\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","// Wall handling is remaining\n\nexport default function bfs(grid, startNode, finishNode = {row: 8, col: 8}) {\n    const visitedNodesInOrder = []\n    const visitedNodes = [startNode]\n    startNode.isVisited = true\n    while (visitedNodes.length) {\n        const currentNode = visitedNodes.shift();        \n        visitedNodesInOrder.push(currentNode)\n        if (currentNode.row === finishNode.row && currentNode.col === finishNode.col) break;\n        \n        updateUnvisitedNeighbors(currentNode, visitedNodes, grid)\n    }\n    return visitedNodesInOrder;\n}\n\nfunction updateUnvisitedNeighbors(node, visitedNodes, grid) {\n    const unvisitedNeighbors = getInvalidMove(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.previousNode = node;\n        neighbor.isVisited = true\n        visitedNodes.push(neighbor)        \n    }\n}\n\nfunction getInvalidMove(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited && !neighbor.isWall);\n}","import { useEffect, useState } from \"react\";\nimport Node from \"./Node/Node\";\nimport './PathFindingVisualizer.css'\nimport { dijkstra, getNodesInShortestPathOrder } from '../../algorithms/djiktras'\nimport bfs from \"../../algorithms/bfs\";\nimport Navbar from \"../Navbar/Navbar\";\nimport React  from 'react';\n\nconst START_NODE_ROW = 10\nconst START_NODE_COL = 15\nconst FINISH_NODE_ROW = 8\nconst FINITSH_NODE_COL = 35\nconst GRID_ROWS = 30\nconst GRID_COLS = 50\n\nexport default function PathFindingVisualizer() {\n\n    const [grid, setGrid] = useState([])\n    const [mouseIsPressed, setMouseIsPressed] = useState(false)\n\n    useEffect(() => {\n        setGrid(getInitialGrid())\n    }, [])\n\n    const handleMouseDown = (row, col) => {\n        const newGrid = getNewGridWithWallToggled(grid, row, col);\n        setGrid(newGrid)\n        setMouseIsPressed(true)\n    }\n    \n    const handleMouseEnter = (row, col) => {\n        if (!mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(grid, row, col);\n        setGrid(newGrid)\n    }\n\n    const handleMouseUp = () => {\n        setMouseIsPressed(false)\n    }\n\n    const clearBoard = () => {\n        const nodes = document.querySelectorAll('.node')\n        for(let node of nodes) {\n            console.log(node.classList)\n            node.classList.remove('node-visited')\n            node.classList.remove('node-shortest-path')\n        }\n        setGrid(getInitialGrid())\n    }\n\n    const handleClearWalls = () => {\n        setGrid(clearWalls(grid))\n    }\n\n    const visualizeDijstra = () => {\n        const startNode = grid[START_NODE_ROW][START_NODE_COL]\n        const finishNode = grid[FINISH_NODE_ROW][FINITSH_NODE_COL]\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode)\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode)\n        animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    const visualizeBfs = () => {\n        const startNode = grid[START_NODE_ROW][START_NODE_COL]\n        const finishNode = grid[FINISH_NODE_ROW][FINITSH_NODE_COL]\n        const visitedNodesInOrder = bfs(grid, startNode, finishNode)\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode)\n        animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder)\n    }\n\n    return (\n        <>\n            <Navbar \n                bfs={visualizeBfs} \n                dijkstra={visualizeDijstra}\n                clearBoard={clearBoard}\n                clearWalls={handleClearWalls}\n            />\n            <div className=\"grid\">\n                { grid.map((row, rowIndex) => {\n                    return <div className=\"rowContainer\" key={rowIndex}> \n                        { row.map((node, nodeIndex) => { \n                            const {row, col, isFinish, isStart, isWall} = node;\n                            return (<Node \n                                        key={nodeIndex} \n                                        col={col}\n                                        row={row}\n                                        isFinish={isFinish} \n                                        isStart={isStart}\n                                        isWall={isWall}\n                                        mouseIsPressed={mouseIsPressed}\n                                        onMouseDown={handleMouseDown}\n                                        onMouseEnter={(row, col) => handleMouseEnter(row, col)}\n                                        onMouseUp={(row, col) => handleMouseUp(row, col)}>\n                                    </Node>\n                            )}) } \n                    </div>\n                })}\n            </div>\n        </>\n    )\n}\n\nfunction getInitialGrid() {\n    const grid = []\n    for(let row = 0; row < GRID_ROWS; row++) {\n        const currRow = []\n        for(let col = 0; col < GRID_COLS; col++) {\n            currRow.push(createNode(row, col))\n        }\n        grid.push(currRow)\n    }\n    return grid;\n}\n\nfunction clearWalls(grid) {\n    const newGrid = []\n    for(let row = 0; row < GRID_ROWS; row++) {\n        const currRow = []\n        for(let col = 0; col < GRID_COLS; col++) {\n            const node = grid[row][col]\n            node.isWall = false; \n            currRow.push(node)\n        }\n        newGrid.push(currRow)\n    }\n    return newGrid;\n}\n\nfunction createNode(row, col) {\n    return {\n        row,\n        col,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINITSH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n    }\n}\n\nfunction animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).classList.add('node-visited')\n      }, 10 * i);\n    }\n}\n\nfunction animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).classList.add('node-shortest-path')\n      }, 50 * i);\n    }\n}\n\nfunction getNewGridWithWallToggled(grid, row, col) {\n    const newGrid = grid.slice()\n    const node = newGrid[row][col]\n    const newNode = {\n        ...node,\n        isWall: !node.isWall\n    }\n    newGrid[row][col] = newNode\n    return newGrid\n}","import Navbar from \"./components/Navbar/Navbar\";\nimport PathFindingVisualizer from \"./components/PathFindingVisualizer/PathFindingVisualizer\";\nimport React  from 'react';\nexport default function App() {\n  return (\n    <>\n      <PathFindingVisualizer />\n    </>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}